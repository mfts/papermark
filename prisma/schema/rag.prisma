model DataroomRAGSettings {
  id         String   @id @default(cuid())
  dataroomId String   @unique
  enabled    Boolean @default(false)
  dataroom   Dataroom @relation(fields: [dataroomId], references: [id], onDelete: Cascade)
  ragIndexingStatus      ParsingStatus    @default(NOT_STARTED) // "NOT_STARTED", "IN_PROGRESS", "COMPLETED", "FAILED"
  indexingStartedAt   DateTime?
  indexingCompletedAt DateTime?
  indexingProgress    Float     @default(0.0) // Progress percentage (0-100)
  indexingError       String? // Error message if indexing failed

  // Token Tracking
  totalEmbeddingTokens  Int @default(0)
  totalProcessingTokens Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([enabled])
  @@index([ragIndexingStatus])
  @@index([indexingStartedAt])
}

model DocumentChunk {
  id         String   @id @default(cuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  content    String @db.Text
  chunkIndex Int // Order of chunk in document
  chunkHash  String // Hash for deduplication

  dataroomId  String
  teamId      String
  contentType String?
  pageRanges  String? // e.g., "1-3", "5", "10-12"
  tokenCount  Int? // Number of tokens in chunk

  sectionHeader   String? // Section header for this chunk
  headerHierarchy String? // JSON string of header hierarchy array
  isSmallChunk    Boolean? // Whether this is a small chunk

  startLine    Int?    // Line number where chunk starts in original document
  endLine      Int?    // Line number where chunk ends in original document

  vectorId String? // ID (Qdrant)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([documentId, chunkIndex])
  @@index([documentId])
  @@index([dataroomId])
  @@index([teamId])
  @@index([chunkHash])
  @@index([vectorId])
  @@index([sectionHeader])
}

model RAGChatSession {
  id          String   @id @default(cuid())
  dataroomId  String   
  linkId      String   
  link        Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  viewerId    String   
  viewer      Viewer   @relation(fields: [viewerId], references: [id], onDelete: Cascade)
  title       String?  // session title
  previewMessage     String? 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  messages    RAGChatMessage[]
  
  @@index([dataroomId, linkId, viewerId, createdAt])
  @@index([linkId, viewerId])
  @@index([dataroomId])
}

model RAGChatMessage {
  id          String   @id @default(cuid())
  sessionId   String
  session     RAGChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  role        String   // "user" or "assistant"
  content     String   @db.Text
  createdAt   DateTime @default(now())
  
  // Metadata
  metadata    RAGChatMessageMetadata?
  
  @@index([sessionId, createdAt])
}

model RAGChatMessageMetadata {
  id                String   @id @default(cuid())
  messageId         String   @unique
  message           RAGChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  // Query Analysis
  queryType         String?  // "document_question", "chitchat", "abusive"
  intent            String?  // "extraction", "summarization", "comparison", etc.
  complexityLevel   String?  // "low", "medium", "high"
  complexityScore   Float?   // Complexity score (0-1)
  
  // Search Strategy
  searchStrategy    String?  // "FastVectorSearch", "StandardVectorSearch", "ExpandedSearch", "PageQueryStrategy"
  strategyConfidence Float?  // Confidence score for strategy selection
  strategyReasoning String?  // AI reasoning for strategy selection
  
  // Performance Metrics
  queryAnalysisTime    Int?  // Time in ms for query analysis
  searchTime          Int?  // Time in ms for document search
  rerankTime          Int?  // Time in ms for reranking
  responseTime        Int?  // Time in ms for response generation
  totalTime           Int?  // Total time in ms
  
  // Token Usage
  inputTokens         Int?  // Input tokens used
  outputTokens        Int?  // Output tokens generated
  totalTokens         Int?  // Total tokens used
  contextTokens       Int?  // Context tokens sent to LLM
  queryTokens         Int?  // Query tokens
  
  // Search Results
  chunkIds            String[] // Array of chunk IDs retrieved
  documentIds         String[] // Array of document IDs searched
  pageRanges          String[] // Array of page ranges searched
  totalSearchResults  Int?     // Total search results found
  allocatedChunks     Int?     // Number of chunks allocated to LLM
  avgRelevanceScore   Float?   // Average relevance score of chunks
  
  // Context Processing
  compressionStrategy String?  // "SmartAllocation", "FixedBudget", "QualityFirst"
  originalContextSize Int?     // Original context size before processing
  compressedContextSize Int?   // Context size after processing
  contextEfficiency   Float?   // Efficiency ratio (chunks/tokens)
  
  // Reranking Information
  wasReranked         Boolean? // Whether results were reranked
  rerankThreshold     Int?     // Threshold for reranking (e.g., 20)
  rerankInputCount    Int?     // Number of results input to reranker
  rerankOutputCount   Int?     // Number of results output from reranker
  
  // Error Information
  errorType           String?  // Type of error if any
  errorMessage        String?  // Error message if any
  isRetryable         Boolean? // Whether the error was retryable
  
  // Additional Metadata
  modelUsed           String?  // LLM model used for generation
  temperature         Float?   // Temperature setting used
  toolsEnabled        Boolean? // Whether AI SDK tools were enabled
  
  createdAt           DateTime @default(now())
  
  @@index([messageId])
  @@index([searchStrategy])
  @@index([queryType])
  @@index([intent])
  @@index([createdAt])
  @@index([totalTokens])
  @@index([avgRelevanceScore])
}