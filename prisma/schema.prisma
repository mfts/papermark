datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_PRISMA_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_PRISMA_SHADOW_URL") // used for migrations
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime       @default(now())
  accounts       Account[]
  sessions       Session[]
  documents      Document[]
  teams          UserTeam[]
  domains        Domain[]
  conversations  Conversation[]
  plan           String         @default("free")
  stripeId       String?        @unique // Stripe subscription / customer ID
  subscriptionId String?        @unique // Stripe subscription ID
  startsAt       DateTime? // Stripe subscription start date
  endsAt         DateTime? // Stripe subscription end date
}

model Team {
  id          String       @id @default(cuid())
  name        String
  users       UserTeam[]
  documents   Document[]
  folders     Folder[]
  domains     Domain[]
  invitations Invitation[]
  sentEmails  SentEmail[]
  brand       Brand?
  datarooms   Dataroom[]
  agreements  Agreement[]

  plan           String    @default("free")
  stripeId       String?   @unique // Stripe customer ID
  subscriptionId String?   @unique // Stripe subscription ID
  startsAt       DateTime? // Stripe subscription start date
  endsAt         DateTime? // Stripe subscription end date

  limits Json? // Plan limits // {datarooms: 1, users: 1, domains: 1, customDomainOnPro: boolean, customDomainInDataroom: boolean}

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id          String  @id @default(cuid())
  logo        String? // This should be a reference to where the file is stored (S3, Google Cloud Storage, etc.)
  brandColor  String? // This should be a reference to the brand color
  accentColor String? // This should be a reference to the accent color
  teamId      String  @unique
  team        Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  MEMBER
}

model UserTeam {
  role   Role   @default(MEMBER)
  userId String
  teamId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id               String              @id @default(cuid())
  name             String
  description      String?
  file             String // This should be a reference to where the file is stored (S3, Google Cloud Storage, etc.)
  type             String? // This should be a reference to the file type (pdf, sheet, etc.)
  storageType      DocumentStorageType @default(VERCEL_BLOB)
  numPages         Int? // This should be a reference to the number of pages in the document
  owner            User?               @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  teamId           String
  team             Team                @relation(fields: [teamId], references: [id], onDelete: Cascade)
  ownerId          String? // This field holds the foreign key.
  assistantEnabled Boolean             @default(false) // This indicates if assistant is enabled for this document
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  links            Link[]
  views            View[]
  versions         DocumentVersion[]
  conversations    Conversation[]

  folderId String? // Optional Folder ID for documents in folders
  folder   Folder? @relation(fields: [folderId], references: [id], onDelete: SetNull)

  datarooms DataroomDocument[] // Datarooms associated with this document

  @@index([ownerId])
  @@index([teamId])
  @@index([folderId])
}

model DocumentVersion {
  id            String              @id @default(cuid())
  versionNumber Int // e.g., 1, 2, 3 for version control
  document      Document            @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId    String
  file          String // This should be a reference to where the file is stored (S3, Google Cloud Storage, etc.)
  type          String? // This should be a reference to the file type (pdf, docx, etc.)
  storageType   DocumentStorageType @default(VERCEL_BLOB)
  numPages      Int? // This should be a reference to the number of pages in the document
  isPrimary     Boolean             @default(false) // Indicates if this is the primary version
  isVertical    Boolean             @default(false) // Indicates if the document is vertical (portrait) or not (landscape)
  fileId        String? // This is the file ID of the OpenAI File API
  pages         DocumentPage[]
  hasPages      Boolean             @default(false) // Indicates if the document has pages
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@unique([versionNumber, documentId])
  @@index([documentId])
}

model DocumentPage {
  id            String              @id @default(cuid())
  version       DocumentVersion     @relation(fields: [versionId], references: [id], onDelete: Cascade)
  versionId     String
  pageNumber    Int // e.g., 1, 2, 3 for 
  embeddedLinks String[]
  pageLinks     Json? // This will store the page links data: [{href: "https://example.com", coords: "0,0,100,100"}]
  metadata      Json? // This will store the page metadata: {originalWidth: 100, origianlHeight: 100, scaledWidth: 50, scaledHeight: 50, scaleFactor: 2}
  file          String // This should be a reference to where the file / page is stored (S3, Google Cloud Storage, etc.)
  storageType   DocumentStorageType @default(VERCEL_BLOB)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@unique([pageNumber, versionId])
  @@index([versionId])
}

enum DocumentStorageType {
  S3_PATH
  VERCEL_BLOB
}

enum LinkType {
  DOCUMENT_LINK
  DATAROOM_LINK
}

model Link {
  id                         String     @id @default(cuid())
  document                   Document?  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId                 String? // This can be nullable, representing links without documents
  dataroom                   Dataroom?  @relation(fields: [dataroomId], references: [id], onDelete: Cascade)
  dataroomId                 String? // This can be nullable, representing links without datarooms
  linkType                   LinkType   @default(DOCUMENT_LINK)
  url                        String?    @unique
  name                       String? // Link name
  slug                       String? // Link slug for pretty URLs
  expiresAt                  DateTime? // Optional expiration date
  password                   String? // Optional password for link protection
  allowList                  String[] // Array of emails and domains allowed to view the document
  denyList                   String[] // Array of emails and domains denied to view the document
  emailProtected             Boolean    @default(true) // Optional email protection
  emailAuthenticated         Boolean    @default(false) // Optional email authentication flag
  allowDownload              Boolean?   @default(false) // Optional give user a option to allow to download the document
  isArchived                 Boolean    @default(false) // Indicates if the link is archived
  views                      View[]
  domain                     Domain?    @relation(fields: [domainId], references: [id], onDelete: SetNull)
  domainId                   String? // This can be nullable, representing links without custom domains
  domainSlug                 String? // This will store the domain's slug even if the domain is deleted
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt
  enableNotification         Boolean?   @default(true) // Optional give user a option to pause/resume the notifications
  enableFeedback             Boolean?   @default(false) // Optional give user a option to enable the reactions toolbar
  enableQuestion             Boolean?   @default(false) // Optional give user a option to enable the question feedback
  enableScreenshotProtection Boolean?   @default(false) // Optional give user a option to enable the screenshot protection
  feedback                   Feedback?
  enableAgreement            Boolean?   @default(false) // Optional give user a option to enable the terms and conditions
  agreement                  Agreement? @relation(fields: [agreementId], references: [id], onDelete: SetNull)
  agreementId                String? // This can be nullable, representing links without agreements
  showBanner                 Boolean?   @default(false) // Optional give user a option to show the banner and end of document signup form
  enableWatermark            Boolean?   @default(false) // Optional give user a option to enable the watermark
  watermarkConfig            Json?      // This will store the watermark configuration: {text: "Confidential", isTiled: false, color: "#000000", fontSize: 12, opacity: 0.5, rotation: 30, position: "top-right"}

  // custom metatags
  metaTitle           String? // This will be the meta title of the link
  metaDescription     String? // This will be the meta description of the link
  metaImage           String? // This will be the meta image of the link
  enableCustomMetatag Boolean? @default(false) // Optional give user a option to enable the custom metatag

  @@unique([domainSlug, slug])
  @@index([documentId])
}

model Domain {
  id          String   @id @default(cuid())
  slug        String   @unique
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  teamId      String
  Team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  verified    Boolean  @default(false) // Whether the domain has been verified
  lastChecked DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  links       Link[] // links associated with this domain

  @@index([userId])
  @@index([teamId])
}

model View {
  id                String             @id @default(cuid())
  link              Link               @relation(fields: [linkId], references: [id])
  linkId            String
  document          Document?          @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId        String?
  dataroom          Dataroom?          @relation(fields: [dataroomId], references: [id], onDelete: Cascade)
  dataroomId        String?
  dataroomViewId    String? // This is the view ID from the dataroom
  viewerEmail       String? // Email of the viewer if known
  viewerName        String? // Name of the viewer if known
  verified          Boolean            @default(false) // Whether the viewer email has been verified
  viewedAt          DateTime           @default(now())
  downloadedAt      DateTime? // This is the time the document was downloaded
  reactions         Reaction[]
  viewType          ViewType           @default(DOCUMENT_VIEW)
  viewerId          String? // This is the viewer ID from the dataroom
  viewer            Viewer?            @relation(fields: [viewerId], references: [id], onDelete: Cascade)
  feedbackResponse  FeedbackResponse?
  agreementResponse AgreementResponse?

  @@index([linkId])
  @@index([documentId])
  @@index([dataroomId])
  @@index([dataroomViewId])
}

enum ViewType {
  DOCUMENT_VIEW
  DATAROOM_VIEW
}

model Viewer {
  id        String    @id @default(cuid())
  email     String
  verified  Boolean   @default(false) // Whether the viewer email has been verified
  invitedAt DateTime? // This is the time the viewer was invited

  dataroomId String
  dataroom   Dataroom @relation(fields: [dataroomId], references: [id], onDelete: Cascade)
  views      View[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([dataroomId, email])
  @@index([dataroomId])
}

model Reaction {
  id         String   @id @default(cuid())
  view       View     @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId     String
  pageNumber Int
  type       String // e.g., "like", "dislike", "love", "hate", etc.
  createdAt  DateTime @default(now())

  @@index([viewId])
}

model Invitation {
  email     String
  expires   DateTime
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  token     String   @unique

  @@unique([email, teamId])
}

enum EmailType {
  FIRST_DAY_DOMAIN_REMINDER_EMAIL
  FIRST_DOMAIN_INVALID_EMAIL
  SECOND_DOMAIN_INVALID_EMAIL
  FIRST_TRIAL_END_REMINDER_EMAIL
  FINAL_TRIAL_END_REMINDER_EMAIL
}

model SentEmail {
  id         String    @id @default(cuid())
  type       EmailType
  recipient  String // Email address of the recipient
  marketing  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  team       Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId     String
  domainSlug String? // Domain that triggered the email. This can be nullable, representing emails not triggered by domains

  @@index([teamId])
}

model Conversation {
  id            String    @id @default(cuid())
  threadId      String    @unique // This is the thread ID from OpenAI Assistant API
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId    String
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime? // This is the last time a message was sent in the thread

  @@unique([userId, documentId])
  @@unique([threadId, documentId])
  @@index([threadId])
}

model Folder {
  id           String     @id @default(cuid())
  name         String
  path         String // the materialized path to the folder; starts always with "/"
  parentId     String?
  documents    Document[]
  childFolders Folder[]   @relation("SubFolders")
  parentFolder Folder?    @relation("SubFolders", fields: [parentId], references: [id], onDelete: SetNull)
  teamId       String
  team         Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, path])
  @@index([parentId])
}

model Dataroom {
  id        String             @id @default(cuid())
  pId       String             @unique // This is the generated public ID for the dataroom dr_1234
  name      String
  teamId    String
  team      Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  documents DataroomDocument[]
  folders   DataroomFolder[]
  links     Link[]
  views     View[]
  viewers   Viewer[]
  brand     DataroomBrand?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId])
}

model DataroomDocument {
  id         String          @id @default(cuid())
  dataroomId String
  dataroom   Dataroom        @relation(fields: [dataroomId], references: [id], onDelete: Cascade)
  documentId String
  document   Document        @relation(fields: [documentId], references: [id], onDelete: Cascade)
  folderId   String?
  folder     DataroomFolder? @relation(fields: [folderId], references: [id], onDelete: SetNull)
  orderIndex Int?             

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([dataroomId, documentId])
  @@index([folderId])
  @@index([dataroomId, folderId, orderIndex])
}

model DataroomFolder {
  id           String             @id @default(cuid())
  name         String
  path         String // the materialized path to the folder; starts always with "/"
  parentId     String?
  documents    DataroomDocument[]
  childFolders DataroomFolder[]   @relation("SubFolders")
  parentFolder DataroomFolder?    @relation("SubFolders", fields: [parentId], references: [id], onDelete: SetNull)
  dataroomId   String
  dataroom     Dataroom           @relation(fields: [dataroomId], references: [id], onDelete: Cascade)
  orderIndex   Int?                

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([dataroomId, path])
  @@index([parentId])
  @@index([dataroomId, parentId, orderIndex])
}

model DataroomBrand {
  id          String   @id @default(cuid())
  logo        String? // This should be a reference to where the file is stored (S3, Google Cloud Storage, etc.)
  banner      String? // This should be a reference to where the file is stored (S3, Google Cloud Storage, etc.)
  brandColor  String? // This should be a reference to the brand color
  accentColor String? // This should be a reference to the accent color
  dataroomId  String   @unique
  dataroom    Dataroom @relation(fields: [dataroomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id     String @id @default(cuid())
  linkId String @unique
  link   Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)
  data   Json // This will store the feedback question data: {question: "What is the purpose of this document?", type: "yes/no", options: ["Yes", "No"]}

  responses FeedbackResponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([linkId])
}

model FeedbackResponse {
  id         String   @id @default(cuid())
  feedbackId String
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  data       Json // This will store the feedback question data: {question: "What is the purpose of this document?", type: "yes/no", options: ["Yes", "No"], answer: "Yes"}
  viewId     String   @unique
  view       View     @relation(fields: [viewId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([feedbackId])
  @@index([viewId])
}

model Agreement {
  id      String @id @default(cuid())
  name    String // Easily identifiable name for the agreement
  content String // This will store the agreement content

  links     Link[]
  responses AgreementResponse[]

  requireName    Boolean @default(true) // Optional require name field

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId])
}

model AgreementResponse {
  id          String    @id @default(cuid())
  agreementId String
  agreement   Agreement @relation(fields: [agreementId], references: [id], onDelete: Cascade)
  viewId      String    @unique
  view        View      @relation(fields: [viewId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agreementId])
  @@index([viewId])
}
