datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_PRISMA_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_PRISMA_SHADOW_URL") // used for migrations
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                         String         @id @default(cuid())
  name                       String?
  email                      String?        @unique
  emailVerified              DateTime?
  image                      String?
  isEmailNotificationEnabled Boolean        @default(true) // by default the user get email for all the events
  createdAt                  DateTime       @default(now())
  accounts                   Account[]
  sessions                   Session[]
  documents                  Document[]
  teams                      UserTeam[]
  domains                    Domain[]
  webhooks                   Webhook[]
  notificationsSent          Notification[] @relation("notificationSent")
  notificaitonsReceived      Notification[] @relation("notificationReceived")
  plan                       String         @default("trial")
  stripeId                   String?        @unique // Stripe subscription / customer ID
  subscriptionId             String?        @unique // Stripe subscription ID
  startsAt                   DateTime? // Stripe subscription start date
  endsAt                     DateTime? // Stripe subscription end date
}

model Team {
  id             String       @id @default(cuid())
  name           String
  users          UserTeam[]
  documents      Document[]
  domains        Domain[]
  invitations    Invitation[]
  plan           String       @default("free")
  stripeId       String?      @unique // Stripe subscription / customer ID
  subscriptionId String?      @unique // Stripe subscription ID
  startsAt       DateTime? // Stripe subscription start date
  endsAt         DateTime? // Stripe subscription end date
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum Role {
  ADMIN
  MEMBER
}

model UserTeam {
  role   Role   @default(MEMBER)
  userId String
  teamId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id          String            @id @default(cuid())
  name        String
  description String?
  file        String // This should be a reference to where the file is stored (S3, Google Cloud Storage, etc.)
  type        String? // This should be a reference to the file type (pdf, docx, etc.)
  numPages    Int? // This should be a reference to the number of pages in the document
  owner       User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  teamId      String?
  team        Team?             @relation(fields: [teamId], references: [id], onDelete: SetNull)
  ownerId     String // This field holds the foreign key.
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  links       Link[]
  views       View[]
  versions    DocumentVersion[]
}

model DocumentVersion {
  id            String         @id @default(cuid())
  versionNumber Int // e.g., 1, 2, 3 for version control
  document      Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId    String
  file          String // This should be a reference to where the file is stored (S3, Google Cloud Storage, etc.)
  type          String? // This should be a reference to the file type (pdf, docx, etc.)
  numPages      Int? // This should be a reference to the number of pages in the document
  isPrimary     Boolean        @default(false) // Indicates if this is the primary version
  pages         DocumentPage[]
  hasPages      Boolean        @default(false) // Indicates if the document has pages
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([versionNumber, documentId])
}

model DocumentPage {
  id         String          @id @default(cuid())
  version    DocumentVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
  versionId  String
  pageNumber Int // e.g., 1, 2, 3 for 
  file       String // This should be a reference to where the file / page is stored (S3, Google Cloud Storage, etc.)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@unique([pageNumber, versionId])
}

model Link {
  id             String    @id @default(cuid())
  document       Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId     String
  url            String?   @unique
  name           String? // Link name
  slug           String? // Link slug for pretty URLs
  expiresAt      DateTime? // Optional expiration date
  password       String? // Optional password for link protection
  allowedEmails  String[] // Array of emails allowed to view the document
  emailProtected Boolean   @default(true) // Optional email protection
  allowDownload  Boolean?  @default(false) // Optional give user a option to allow to download the document
  isArchived     Boolean   @default(false) // Indicates if the link is archived
  views          View[]
  domain         Domain?   @relation(fields: [domainId], references: [id], onDelete: SetNull)
  domainId       String? // This can be nullable, representing links without custom domains
  domainSlug     String? // This will store the domain's slug even if the domain is deleted
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([domainSlug, slug])
}

model Domain {
  id          String   @id @default(cuid())
  slug        String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  teamId      String?
  Team        Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
  verified    Boolean  @default(false) // Whether the domain has been verified
  lastChecked DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  links       Link[] // links associated with this domain
}

model View {
  id          String   @id @default(cuid())
  link        Link     @relation(fields: [linkId], references: [id])
  linkId      String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String
  viewerEmail String? // Email of the viewer if known
  viewedAt    DateTime @default(now())
}

model Invitation {
  email     String
  expires   DateTime
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  token     String   @unique

  @@unique([email])
}

model Webhook {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetUrl String
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id         String   @id @default(cuid())
  senderId   String?
  receiverId String
  sender     User?    @relation("notificationSent", fields: [senderId], references: [id], onDelete: SetNull)
  receiver   User     @relation("notificationReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  event      Event
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Event {
  LINKED_VIEWED // When a shared document link is viewed by someone.
  LINKED_SHARED // When a user shares a document link with others.
  SUBSCRIPTION_RENEWAL // notifications about upcoming subscription renewals or changes.
  DOCUMENT_ADDED // when a new document is added
  DOCUMENT_UPDATED // when a document's detail changed such as Document Name, etc
  DOCUMENT_DELETED // when a document is deleted
  DOCUMENT_FEEDBACK // upvote / downvote, reactions, comments etc
  TEAM_CREATED // when a team is created
  TEAM_UPDATED // when team's detail changed such as Team Name, etc
  TEAM_DELETED // when a team is deleted
  TEAM_MEMBER_INVITED // when a new team member is invited
  TEAM_MEMBER_REMOVED // when a team member is removed from the team
  TEAM_MEMBER_PROMOTED // when a team member gets promoted to admin
  TEAM_MEMBER_DEMOTED // when a team member gets demoted to member
  DOMAIN_ADDED // when a new domain is added
  DOMAIN_REMOVED // when a existing domain is removed
  ACCOUNT_ACTIVITY // account-related activities, such as login from a new device.
  SYSTEM_UPDATE // Notifications about system-wide updates or maintenance.
  PROMOTION // announcement about promotions, discounts, or special offers
}
